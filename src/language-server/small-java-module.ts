import {
    createDefaultModule, createDefaultSharedModule, DefaultSharedModuleContext, inject,
    LangiumServices, LangiumSharedServices, Module, PartialLangiumServices
} from 'langium';
import { SmallJavaGeneratedModule, SmallJavaGeneratedSharedModule } from './generated/module';
import { SmallJavaValidationRegistry, SmallJavaValidator } from './small-java-validator';
import { SmallJavaDocumentSymbolProvider } from './small-java-document-symbol-provider';
import { SmallJavaNameProvider } from './small-java-naming';
import { SmallJavaScopeComputation } from './small-java-scope';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type SmallJavaAddedServices = {
    validation: {
        SmallJavaValidator: SmallJavaValidator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type SmallJavaServices = LangiumServices & SmallJavaAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const SmallJavaModule: Module<SmallJavaServices, PartialLangiumServices & SmallJavaAddedServices> = {
    references: {
        ScopeComputation: (services) => new SmallJavaScopeComputation(services),
        NameProvider: () => new SmallJavaNameProvider()
    },
    validation: {
        ValidationRegistry: (services) => new SmallJavaValidationRegistry(services),
        SmallJavaValidator: () => new SmallJavaValidator()
    },
    lsp: {
        DocumentSymbolProvider: (services) => new SmallJavaDocumentSymbolProvider(services),
    },
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createSmallJavaServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    SmallJava: SmallJavaServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        SmallJavaGeneratedSharedModule
    );
    const SmallJava = inject(
        createDefaultModule({ shared }),
        SmallJavaGeneratedModule,
        SmallJavaModule
    );
    shared.ServiceRegistry.register(SmallJava);
    return { shared, SmallJava };
}
